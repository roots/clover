<?php

namespace {{pascalcase namespace}}\Plugin;

use {{pascalcase namespace}}\Plugin\Asset;
use {{pascalcase namespace}}\Plugin\BlockInterface;
use Psr\Container\ContainerInterface;
use Illuminate\Support\Collection;

/**
 * Block class.
 */
class Block implements BlockInterface
{
    /** @var string */
    protected $name;

    /** @var Collection */
    protected $attributes;

    /** @var object */
    protected $assets;

    /**
     * Constructor.
     */
    public function __construct(ContainerInterface $bud)
    {
        $this->bud = $bud;

        $this->assets = (object) [
            'editor' => $bud->get('collection')::make([]),
            'public' => $bud->get('collection')::make([]),
        ];
    }

    /**
     * Get name.
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Set name.
     *
     * @param  string
     * @return void
     */
    public function setName(string $name): void
    {
        $this->name = $name;
    }

    /**
     * Get handle
     *
     * @return string
     */
    public function getHandle(): string
    {
        return "{$this->bud->get('plugin.namespace')}/{$this->name}";
    }

    /**
     * Get attributes.
     *
     * @return \Illuminate\Support\Collection
     */
    public function getAttributes(): Collection
    {
        return $this->attributes;
    }

    /**
     * Set attributes.
     *
     * @param  string $attributesPath
     * @return Block
     */
    public function setAttributes(Collection $attributes): void
    {
        $this->attributes = $attributes;
    }

    /**
     * Get asset url
     *
     * @param  string
     * @param  string
     * @return string
     */
    public function getAssetUrl(string $context, string $type): string
    {
        return $this->assets->{$context}->get($type);
    }

    /**
     * Set asset
     *
     * @param  string
     * @param  string
     * @param  string
     * @return void
     */
    public function setAsset(string $context, string $type, string $asset): void
    {
        $this->assets->{$context}->put($type, $asset);
    }

   /**
    * Get dependencies
    *
    * @param  string
    * @return void
    */
   public function getDependencies(string $context): array
   {
        return $this->assets->{$context}->get('dependencies');
   }

    /**
     * Set dependencies
     *
     * @param  string
     * @param  string
     * @return void
     */
    public function setDependencies(string $context, array $dependencies): void
    {
        $this->assets->{$context}->put('dependencies', $dependencies);
    }
}
