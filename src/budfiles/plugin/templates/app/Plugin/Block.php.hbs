<?php

namespace {{pascalcase namespace}}\Plugin;

use \WP_Block_Type;
use {{pascalcase namespace}}\Plugin\AssetInterface;
use {{pascalcase namespace}}\Plugin\BlockInterface;
use Psr\Container\ContainerInterface;
use Illuminate\Support\Collection;

/**
 * Block class.
 */
class Block extends WP_Block_Type implements BlockInterface
{
    /** @var string */
    public $name;

    /** @var string */
    public $editor_script;

    /** @var string */
    public $editor_style;

    /** @var string */
    public $script;

    /** @var string */
    public $style;

    /** @var Collection */
    public $assets;

    /** @var Collection */
    public $attributes;

    /**
     * Constructor.
     */
    public function __construct(ContainerInterface $bud)
    {
        $this->bud = $bud;
        $this->assets = $this->bud->get('collection')::make([]);
    }

    /**
     * Get name.
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Set the block name.
     *
     * @param  string
     * @return void
     */
    public function setName(string $name): void
    {
        $this->name = "{$this->bud->get('plugin.namespace')}/{$name}";
    }

    /**
     * Get attributes.
     *
     * @return \Illuminate\Support\Collection
     */
    public function getAttributes(): Collection
    {
        return $this->attributes;
    }

    /**
     * Set attributes.
     *
     * @param  string $attributesPath
     * @return Block
     */
    public function setAttributes(Collection $attributes): void
    {
        $this->attributes = $attributes;
    }

    /**
     * Get editor script
     *
     * @return string
     */
    public function getEditorScript(): string
    {
        return $this->editor_script;
    }

    /**
     * Get editor style
     *
     * @return string
     */
    public function getEditorStyle(): string
    {
        return $this->editor_style;
    }

    /**
     * Get editor script
     *
     * @param  string
     * @return string
     */
    public function getPublicScript(): string
    {
        return $this->script;
    }

    /**
     * Set editor style
     *
     * @param  string
     * @return string
     */
    public function getPublicStyle(): string
    {
        return $this->style;
    }

    /**
     * Set editor asset
     *
     * @param  Asset
     * @return void
     */
    public function setEditorAsset(AssetInterface $asset): void
    {
        $this->assets->push($asset);

        $property = "editor_{$asset->getType()}";
        $this->{$property} = $asset->getName();
    }

    /**
     * Set public asset
     *
     * @param  string
     * @return void
     */
    public function setPublicAsset(AssetInterface $asset): void
    {
        $this->assets->push($asset);

        $this->{$asset->getType()} = $asset->getName();
    }

    /**
     * Get assets.
     *
     * @return Collection
     */
    public function getAssets(): Collection
    {
        return $this->assets;
    }
}