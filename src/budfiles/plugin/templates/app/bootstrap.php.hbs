<?php

/**
 * The bootstrap file creates and returns the container.
 */

require __DIR__ . '/../vendor/autoload.php';

use function DI\create;
use DI\ContainerBuilder;
use Psr\Container\ContainerInterface;
use Illuminate\Support\Collection;
use {{pascalcase namespace}}\Plugin\Block;
use {{pascalcase namespace}}\Plugin\BlockRepository;
use {{pascalcase namespace}}\Plugin\Manifest;

$builder = new ContainerBuilder;

$builder->addDefinitions([
    'block' => function (ContainerInterface $bud) {
        return new Block($bud, $bud->get('collection'));
    },
    'blocks' => function (ContainerInterface $bud) {
        return new BlockRepository($bud);
    },
    'collection' => create(Collection::class),
    'manifest' => function (ContainerInterface $bud) {
        if (! $manifestPath = realpath(__DIR__ . '/../dist/assets.json')) {
            return;
        }

        $assets = $bud->get('collection')::make(
            json_decode(file_get_contents($manifestPath))
        );

        return new Manifest($bud, $assets, $bud->get('collection'));
    },
    'plugin.blocks' => function(ContainerInterface $bud) {
        return $bud->get('collection')::make(
            glob($bud->get('plugin.path.src.blocks') . '/*', GLOB_ONLYDIR)
        )->map(function ($path) {
            return str_replace($this->bud->get('plugin.path.src.blocks') . '/', '', $path);
        });
    },
    'plugin.namespace' => 'acme-co',
    'plugin.url' => plugins_url('', __DIR__),
    'plugin.path' => realpath(__DIR__ . '/../'),
    'plugin.path.dist' => realpath(__DIR__ . '/../dist/'),
    'plugin.path.src' => realpath(__DIR__ . '/../src/'),
    'plugin.path.src.blocks' => realpath(__DIR__ . '/../src/blocks/'),
]);

return $builder->build();
