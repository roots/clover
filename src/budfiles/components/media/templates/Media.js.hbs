/** @wordpress */
import {MediaUpload, MediaUploadCheck} from '@wordpress/block-editor'
import {Button} from '@wordpress/components'

/** Modules */
import PropTypes from 'prop-types'

/**
 * Allowed media types
 * @const {array} ALLOWED_MEDIA_TYPES
 */
const ALLOWED_MEDIA_TYPES = ['image']

/**
 * Media
 *
 * Attributes.json example entry:
 *
 *  "media": {
 *    "type": "object",
 *    "selector": "img"
 *  }
 *
 * @prop {array}    allowedMediaTypes
 * @prop {bool}     multiple
 * @prop {object}   media
 * @prop {function} setAttributes
 */
const MediaEdit = ({
  allowedMediaTypes,
  multiple,
  media,
  setAttributes,
}) => {
  /**
   * Handle media attribute
   * @param {object} media
   */
  const setMedia = media => setAttributes({media})

  return (
    <MediaUploadCheck>
      <MediaUpload
        allowedMediaTypes={allowedMediaTypes ?? ALLOWED_MEDIA_TYPES}
        multiple={multiple ?? false}
        value={media?.id ?? null}
        onSelect={setMedia}
        render={({open}) => (
          <>
            {media && (
              <figure>
                <img
                  title={media.title}
                  alt={media.alt}
                  src={media.url}
                />
              </figure>
            )}

            <Button isPrimary onClick={open}>
              {media?.id ? 'Replace' : 'Add'} image
            </Button>
          </>
        )}
      />
    </MediaUploadCheck>
  )
}

/**
 * Media (Save)
 *
 * @prop {object}   media
 * @prop {function} setAttributes
 */
const MediaSave = ({media}) => {
  return media ? (
    <img
      src={media.url}
      alt={media.alt}
      title={media.title}
    />
  ) : []
}

MediaEdit.propTypes = {
  allowedMediaTypes: PropTypes.array,
  multiple: PropTypes.bool,
  media: PropTypes.object.shape({
    url: PropTypes.string.isRequired,
    alt: PropTypes.string,
    title: PropTypes.string,
  }).isRequired,
  setAttributes: PropTypes.func.isRequired,
}

MediaSave.propTypes = {
  media: PropTypes.shape({
    url: PropTypes.string.isRequired,
    alt: PropTypes.string,
    title: PropTypes.string,
  }),
}

export {MediaEdit, MediaSave}
